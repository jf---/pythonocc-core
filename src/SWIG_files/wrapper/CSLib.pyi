from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TColgp import *
from OCC.Core.gp import *
from OCC.Core.math import *
from OCC.Core.TColStd import *


class CSLib_NormalStatus:
	CSLib_Singular: int = ...
	CSLib_Defined: int = ...
	CSLib_InfinityOfSolutions: int = ...
	CSLib_D1NuIsNull: int = ...
	CSLib_D1NvIsNull: int = ...
	CSLib_D1NIsNull: int = ...
	CSLib_D1NuNvRatioIsNull: int = ...
	CSLib_D1NvNuRatioIsNull: int = ...
	CSLib_D1NuIsParallelD1Nv: int = ...

class CSLib_DerivativeStatus:
	CSLib_Done: int = ...
	CSLib_D1uIsNull: int = ...
	CSLib_D1vIsNull: int = ...
	CSLib_D1IsNull: int = ...
	CSLib_D1uD1vRatioIsNull: int = ...
	CSLib_D1vD1uRatioIsNull: int = ...
	CSLib_D1uIsParallelD1v: int = ...

class CSLib:
	@staticmethod
	def DNNUV(self, Nu: int, Nv: int, DerSurf: TColgp_Array2OfVec) -> gp_Vec: ...
	@staticmethod
	def DNNUV(self, Nu: int, Nv: int, DerSurf1: TColgp_Array2OfVec, DerSurf2: TColgp_Array2OfVec) -> gp_Vec: ...
	@staticmethod
	def DNNormal(self, Nu: int, Nv: int, DerNUV: TColgp_Array2OfVec, Iduref: Optional[int], Idvref: Optional[int]) -> gp_Vec: ...
	@staticmethod
	def Normal(self, D1U: gp_Vec, D1V: gp_Vec, SinTol: float, theStatus: CSLib_DerivativeStatus, Normal: gp_Dir) -> None: ...
	@staticmethod
	def Normal(self, D1U: gp_Vec, D1V: gp_Vec, D2U: gp_Vec, D2V: gp_Vec, D2UV: gp_Vec, SinTol: float, theStatus: CSLib_NormalStatus, Normal: gp_Dir) -> bool: ...
	@staticmethod
	def Normal(self, D1U: gp_Vec, D1V: gp_Vec, MagTol: float, theStatus: CSLib_NormalStatus, Normal: gp_Dir) -> None: ...
	@staticmethod
	def Normal(self, MaxOrder: int, DerNUV: TColgp_Array2OfVec, MagTol: float, U: float, V: float, Umin: float, Umax: float, Vmin: float, Vmax: float, theStatus: CSLib_NormalStatus, Normal: gp_Dir) -> Tuple[int, int]: ...

class CSLib_Class2d:
	@overload
	def __init__(self, thePnts2d: TColgp_Array1OfPnt2d, theTolU: float, theTolV: float, theUMin: float, theVMin: float, theUMax: float, theVMax: float) -> None: ...
	@overload
	def __init__(self, thePnts2d: TColgp_SequenceOfPnt2d, theTolU: float, theTolV: float, theUMin: float, theVMin: float, theUMax: float, theVMax: float) -> None: ...
	def InternalSiDans(self, X: float, Y: float) -> int: ...
	def InternalSiDansOuOn(self, X: float, Y: float) -> int: ...
	def SiDans(self, P: gp_Pnt2d) -> int: ...
	def SiDans_OnMode(self, P: gp_Pnt2d, Tol: float) -> int: ...

class CSLib_NormalPolyDef(math_FunctionWithDerivative):
	def __init__(self, k0: int, li: TColStd_Array1OfReal) -> None: ...
	def Derivative(self, X: float) -> Tuple[bool, float]: ...
	def Value(self, X: float) -> Tuple[bool, float]: ...
	def Values(self, X: float) -> Tuple[bool, float, float]: ...
